###Pandas教程
##### 1.什么是pandas
![numby](./static/pandas.png)

#### pandas 大纲

##### pandas 有两个主要的数据结构：Series 和 DataFrame
* Series 是一个一维数组对象 ，它包含一组索引和一组数据，可以把它理解为一组带索引的数组。

* DataFrame 是一个表格型的数据结构。它提供有序的列和不同类型的列值。

##### 数据导入：
```python
　　pd.read_csv(filename):从csv文件中导入数据;
　　pd.read_table(filename):从限定分隔符的文本文件导入数据；
　　pd.read_excel(filename):从Excel文件导入数据；
　　pd.read_sql(query,connection_object):从SQL表/库中导入数据；
　　pd.read_json(json_string):从JSON格式的字符串导入数据；
　　pd.read_html(url):解析URLL，字符串或者HTML文件；
　　pd.read_clipboard():从粘贴板获取内容；
　　pd.DataFrame(dict):从字典对象导入数据；
   df.read_hdf('foo.h5', 'df') HDF5 层次性数据格式第五版
```
##### 数据导出：

```python
　　df.to_csv(filename):导出数据到CSV文件；
　　df.excel(filename):导出数据到EXCEl文件；
　　df.to_sql(table_nname,connection_object):导出数据到SQL表；
　　df.json(filename):以json格式导出数据到文本文件；
   df.to_hdf('foo.h5', 'df')
```

##### 创建对象：
```python
　　pd.DataFrame(np.random.rand(20,5)):创建20行5列的随即数组成的DataFrame对象；
　　pd.Series(my_list):从可迭代对象my_list创建一个Series对象；
　　df.index = pd.date_range('1900/1/30',periods=df.shape[0]):增加一个日期索引；

　　index和reindex联合使用很有用处，index可作为索引并且元素乱排序之后，所以跟着元素保持不变，因此，当重排元素时，只需要对index进行才重排即可:reindex。
```
##### 数据查看：
```python


　　df.info()：查看索引、数据类型和内存信息;
　　df.tail():查看DataFrame对象的最后n行；
　　df.shape():查看行数和列数；
　　df.head():查看DataFrame对象的前n行；
　　df.describe():查看数值型列的汇总统计;
　　s.value_counts(dropna=False):查看Series对象的唯一值和计数；
　　df.apply(pd.Seices.value_counts):查看DataFrame对象中每一列的唯一值和计数；
```

##### 数据选取：
```python
　　df[col]：根据列名，并以Series的形式返回列；
　　df[[col1, col2]]：以DataFrame形式返回多列；
　　s.iloc[0]：按位置选取数据；
　　s.loc['index_one']：按索引选取数据；
　　df.iloc[0,:]：返回第一行；
```
 

##### 数据清洗：
```python
　　df.columns = ['a','b','c']：重命名列名

　　pd.isnull()：检查DataFrame对象中的空值，并返回一个Boolean数组；

　　pd.notnull()：检查DataFrame对象中的非空值，并返回一个Boolean数组
　　df.dropna()：删除所有包含空值的行；

　　df.fillna(x)：用x替换DataFrame对象中所有的空值；

　　s.astype(float)：将Series中的数据类型更改为float类型；

　　s.replace(1,'one')：用‘one’代替所有等于1的值
　　df.rename(columns=lambda x: x + 1)：批量更改列名；

　　df.set_index('column_one')：更改索引列；
```
 

##### 数据处理：
```python
　　df[df[col] > 0.5]：选择col列的值大于0.5的行；
　　df.sort_values(col1)：按照列col1排序数据，默认升序排列；
　　df.groupby(col)：返回一个按列col进行分组的Groupby对象；

　　df.groupby(col1).agg(np.mean)：返回按列col1分组的所有列的均值；

　　df.pivot_table(index=col1, values=[col2,col3], aggfunc=max)：创建一个按列col1进行分组，并计算col2和col3的最大值的数据透视表；

　　data.apply(np.mean)：对DataFrame中的每一列应用函数np.mean
```
 

##### 数据合并：
```python
    将df2中的行添加到df1的尾部
　　 df1.append(df2)：
    将df2中的列添加到df1的尾部
　　df.concat([df1, df2],axis=1)：
    对df1的列和df2的列执行SQL形式的join
　　df1.join(df2,on=col1,how='inner')
```
 

##### 数据统计：
```python
　　df.describe()：查看数据值列的汇总统计；

　　df.mean()：返回所有列的均值

　　df.corr()：返回列与列之间的相关系数；

　　df.count()：返回每一列中的非空值的个数；

　　df.max()：返回每一列的最大值

　　df.min()：返回每一列的最小值；

　　df.median()：返回每一列的中位数；

　　df.std()：返回每一列的标准
```
 
##### Pandas支持的数据类型：
```python
　　int 整型
　　float 浮点型
　　bool 布尔类型
　　object 字符串类型
　　category 种类
　　datetime 时间类型
```
 


#### 十分钟入门 Pandas


本节以下列方式导入 Pandas 与 NumPy：
```python
In [1]: import numpy as np

In [2]: import pandas as pd
```

#####  生成对象

Series 是带标签的一维数组，可存储整数、浮点数、字符串、Python 对象等类型的数据。轴标签统称为索引。调用 pd.Series 函数即可创建 Series：
```python
>>> s = pd.Series(data, index=index)
```
用值列表生成 Series 时，Pandas 默认自动生成整数索引：

```python
In [3]: s = pd.Series([1, 3, 5, np.nan, 6, 8])

In [4]: s
Out[4]: 
0    1.0
1    3.0
2    5.0
3    NaN
4    6.0
5    8.0
dtype: float64
```
用含日期时间索引与标签的 NumPy 数组生成 DataFrame：

```python
In [5]: dates = pd.date_range('20130101', periods=6)

In [6]: dates
Out[6]: 
DatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',
               '2013-01-05', '2013-01-06'],
              dtype='datetime64[ns]', freq='D')

In [7]: df = pd.DataFrame(np.random.randn(6, 4), index=dates, columns=list('ABCD'))

In [8]: df
Out[8]: 
                   A         B         C         D
2013-01-01  0.469112 -0.282863 -1.509059 -1.135632
2013-01-02  1.212112 -0.173215  0.119209 -1.044236
2013-01-03 -0.861849 -2.104569 -0.494929  1.071804
2013-01-04  0.721555 -0.706771 -1.039575  0.271860
2013-01-05 -0.424972  0.567020  0.276232 -1.087401
2013-01-06 -0.673690  0.113648 -1.478427  0.524988

```

用 Series 字典对象生成 DataFrame:

```python
In [9]: df2 = pd.DataFrame({'A': 1.,
   ...:                     'B': pd.Timestamp('20130102'),
   ...:                     'C': pd.Series(1, index=list(range(4)), dtype='float32'),
   ...:                     'D': np.array([3] * 4, dtype='int32'),
   ...:                     'E': pd.Categorical(["test", "train", "test", "train"]),
   ...:                     'F': 'foo'})
   ...: 

In [10]: df2
Out[10]: 
     A          B    C  D      E    F
0  1.0 2013-01-02  1.0  3   test  foo
1  1.0 2013-01-02  1.0  3  train  foo
2  1.0 2013-01-02  1.0  3   test  foo
3  1.0 2013-01-02  1.0  3  train  foo

```

DataFrame 的列有不同数据类型。
```python
In [11]: df2.dtypes
Out[11]: 
A           float64
B    datetime64[ns]
C           float32
D             int32
E          category
F            object
dtype: object
```


##### 查看数据

下列代码说明如何查看 DataFrame 头部和尾部数据：

```python
In [13]: df.head()
Out[13]: 
                   A         B         C         D
2013-01-01  0.469112 -0.282863 -1.509059 -1.135632
2013-01-02  1.212112 -0.173215  0.119209 -1.044236
2013-01-03 -0.861849 -2.104569 -0.494929  1.071804
2013-01-04  0.721555 -0.706771 -1.039575  0.271860
2013-01-05 -0.424972  0.567020  0.276232 -1.087401

In [14]: df.tail(3)
Out[14]: 
                   A         B         C         D
2013-01-04  0.721555 -0.706771 -1.039575  0.271860
2013-01-05 -0.424972  0.567020  0.276232 -1.087401
2013-01-06 -0.673690  0.113648 -1.478427  0.524988
```
显示索引与列名：

```python
In [15]: df.index
Out[15]: 
DatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',
               '2013-01-05', '2013-01-06'],
              dtype='datetime64[ns]', freq='D')

In [16]: df.columns
Out[16]: Index(['A', 'B', 'C', 'D'], dtype='object')
```

下面的 df 这个 DataFrame 里的值都是浮点数，DataFrame.to_numpy() 的操作会很快，而且不复制数据。

```
In [17]: df.to_numpy()
Out[17]: 
array([[ 0.4691, -0.2829, -1.5091, -1.1356],
       [ 1.2121, -0.1732,  0.1192, -1.0442],
       [-0.8618, -2.1046, -0.4949,  1.0718],
       [ 0.7216, -0.7068, -1.0396,  0.2719],
       [-0.425 ,  0.567 ,  0.2762, -1.0874],
       [-0.6737,  0.1136, -1.4784,  0.525 ]])
```

df2 这个 DataFrame 包含了多种类型，DataFrame.to_numpy() 操作就会耗费较多资源。

```python
In [18]: df2.to_numpy()
Out[18]: 
array([[1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'test', 'foo'],
       [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'train', 'foo'],
       [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'test', 'foo'],
       [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'train', 'foo']], dtype=object)
```


describe() 可以快速查看数据的统计摘要：
```
In [19]: df.describe()
Out[19]: 
              A         B         C         D
count  6.000000  6.000000  6.000000  6.000000
mean   0.073711 -0.431125 -0.687758 -0.233103
std    0.843157  0.922818  0.779887  0.973118
min   -0.861849 -2.104569 -1.509059 -1.135632
25%   -0.611510 -0.600794 -1.368714 -1.076610
50%    0.022070 -0.228039 -0.767252 -0.386188
75%    0.658444  0.041933 -0.034326  0.461706
max    1.212112  0.567020  0.276232  1.071804
```

转置数据：

```python
In [20]: df.T
Out[20]: 
   2013-01-01  2013-01-02  2013-01-03  2013-01-04  2013-01-05  2013-01-06
A    0.469112    1.212112   -0.861849    0.721555   -0.424972   -0.673690
B   -0.282863   -0.173215   -2.104569   -0.706771    0.567020    0.113648
C   -1.509059    0.119209   -0.494929   -1.039575    0.276232   -1.478427
D   -1.135632   -1.044236    1.071804    0.271860   -1.087401    0.524988
```
按轴排序：

```python
In [21]: df.sort_index(axis=1, ascending=False)
Out[21]: 
                   D         C         B         A
2013-01-01 -1.135632 -1.509059 -0.282863  0.469112
2013-01-02 -1.044236  0.119209 -0.173215  1.212112
2013-01-03  1.071804 -0.494929 -2.104569 -0.861849
2013-01-04  0.271860 -1.039575 -0.706771  0.721555
2013-01-05 -1.087401  0.276232  0.567020 -0.424972
2013-01-06  0.524988 -1.478427  0.113648 -0.673690

```
按值排序：


```python
In [22]: df.sort_values(by='B')
Out[22]: 
                   A         B         C         D
2013-01-03 -0.861849 -2.104569 -0.494929  1.071804
2013-01-04  0.721555 -0.706771 -1.039575  0.271860
2013-01-01  0.469112 -0.282863 -1.509059 -1.135632
2013-01-02  1.212112 -0.173215  0.119209 -1.044236
2013-01-06 -0.673690  0.113648 -1.478427  0.524988
2013-01-05 -0.424972  0.567020  0.276232 -1.087401
```

##### 获取数据
选择单列，产生 Series，与 df.A 等效：
```python
In [23]: df['A']
Out[23]: 
2013-01-01    0.469112
2013-01-02    1.212112
2013-01-03   -0.861849
2013-01-04    0.721555
2013-01-05   -0.424972
2013-01-06   -0.673690
Freq: D, Name: A, dtype: float64
```

用 [ ] 切片行：
```python
In [24]: df[0:3]
Out[24]: 
                   A         B         C         D
2013-01-01  0.469112 -0.282863 -1.509059 -1.135632
2013-01-02  1.212112 -0.173215  0.119209 -1.044236
2013-01-03 -0.861849 -2.104569 -0.494929  1.071804

In [25]: df['20130102':'20130104']
Out[25]: 
                   A         B         C         D
2013-01-02  1.212112 -0.173215  0.119209 -1.044236
2013-01-03 -0.861849 -2.104569 -0.494929  1.071804
2013-01-04  0.721555 -0.706771 -1.039575  0.271860
```
按标签选择

用标签提取一行数据：
```python
In [26]: df.loc[dates[0]]
Out[26]: 
A    0.469112
B   -0.282863
C   -1.509059
D   -1.135632
Name: 2013-01-01 00:00:00, dtype: float64
```

用标签选择多列数据：

```python
In [27]: df.loc[:, ['A', 'B']]
Out[27]: 
                   A         B
2013-01-01  0.469112 -0.282863
2013-01-02  1.212112 -0.173215
2013-01-03 -0.861849 -2.104569
2013-01-04  0.721555 -0.706771
2013-01-05 -0.424972  0.567020
2013-01-06 -0.673690  0.113648
```
用标签切片，包含行与列结束点：
```python
In [28]: df.loc['20130102':'20130104', ['A', 'B']]
Out[28]: 
                   A         B
2013-01-02  1.212112 -0.173215
2013-01-03 -0.861849 -2.104569
2013-01-04  0.721555 -0.706771
```

##### 布尔索引
用单列的值选择数据：

```python
In [39]: df[df.A > 0]
Out[39]: 
                   A         B         C         D
2013-01-01  0.469112 -0.282863 -1.509059 -1.135632
2013-01-02  1.212112 -0.173215  0.119209 -1.044236
2013-01-04  0.721555 -0.706771 -1.039575  0.271860
```

统计
一般情况下，运算时排除缺失值。

描述性统计：
```python

In [61]: df.mean()
Out[61]: 
A   -0.004474
B   -0.383981
C   -0.687758
D    5.000000
F    3.000000
dtype: float64

```
在另一个轴(即，行)上执行同样的操作：



```python
In [62]: df.mean(1)
Out[62]: 
2013-01-01    0.872735
2013-01-02    1.431621
2013-01-03    0.707731
2013-01-04    1.395042
2013-01-05    1.883656
2013-01-06    1.592306
Freq: D, dtype: float64

```

##### Apply 函数
Apply 函数处理数据：



```python
In [66]: df.apply(np.cumsum)
Out[66]: 
                   A         B         C   D     F
2013-01-01  0.000000  0.000000 -1.509059   5   NaN
2013-01-02  1.212112 -0.173215 -1.389850  10   1.0
2013-01-03  0.350263 -2.277784 -1.884779  15   3.0
2013-01-04  1.071818 -2.984555 -2.924354  20   6.0
2013-01-05  0.646846 -2.417535 -2.648122  25  10.0
2013-01-06 -0.026844 -2.303886 -4.126549  30  15.0

In [67]: df.apply(lambda x: x.max() - x.min())
Out[67]: 
A    2.073961
B    2.671590
C    1.785291
D    0.000000
F    4.000000
dtype: float64

```

##### 直方图
详见直方图与离散化。

```python
In [68]: s = pd.Series(np.random.randint(0, 7, size=10))

In [69]: s
Out[69]: 
0    4
1    2
2    1
3    2
4    6
5    4
6    4
7    6
8    4
9    4
dtype: int64

In [70]: s.value_counts()
Out[70]: 
4    5
6    2
2    2
1    1
dtype: int64
```

##### 分组
```python
In [91]: df = pd.DataFrame({'A': ['foo', 'bar', 'foo', 'bar',
   ....:                          'foo', 'bar', 'foo', 'foo'],
   ....:                    'B': ['one', 'one', 'two', 'three',
   ....:                          'two', 'two', 'one', 'three'],
   ....:                    'C': np.random.randn(8),
   ....:                    'D': np.random.randn(8)})
   ....: 

In [92]: df
Out[92]: 
     A      B         C         D
0  foo    one -1.202872 -0.055224
1  bar    one -1.814470  2.395985
2  foo    two  1.018601  1.552825
3  bar  three -0.595447  0.166599
4  foo    two  1.395433  0.047609
5  bar    two -0.392670 -0.136473
6  foo    one  0.007207 -0.561757
7  foo  three  1.928123 -1.623033
```
```python
In [93]: df.groupby('A').sum()
Out[93]: 
            C        D
A                     
bar -2.802588  2.42611
foo  3.146492 -0.63958
```

多列分组后，生成多层索引，也可以应用 sum 函数：
```python
In [94]: df.groupby(['A', 'B']).sum()
Out[94]: 
                  C         D
A   B                        
bar one   -1.814470  2.395985
    three -0.595447  0.166599
    two   -0.392670 -0.136473
foo one   -1.195665 -0.616981
    three  1.928123 -1.623033
    two    2.414034  1.600434
```
##### 时间序列(TimeSeries)

Pandas 为频率转换时重采样提供了虽然简单易用，但强大高效的功能，如，将秒级的数据转换为 5 分钟为频率的数据。这种操作常见于财务应用程序，但又不仅限于此。详见时间序列。
```python
In [108]: rng = pd.date_range('1/1/2012', periods=100, freq='S')

In [109]: ts = pd.Series(np.random.randint(0, 500, len(rng)), index=rng)

In [110]: ts.resample('5Min').sum()
Out[110]: 
2012-01-01    25083
Freq: 5T, dtype: int64
```
按季度
```
In [123]: prng = pd.period_range('1990Q1', '2000Q4', freq='Q-NOV')

In [124]: ts = pd.Series(np.random.randn(len(prng)), prng)

In [125]: ts.index = (prng.asfreq('M', 'e') + 1).asfreq('H', 's') + 9

In [126]: ts.head()
Out[126]: 
1990-03-01 09:00   -0.902937
1990-06-01 09:00    0.068159
1990-09-01 09:00   -0.057873
1990-12-01 09:00   -0.368204
1991-03-01 09:00   -1.144073
```
##### 可视化

详见可视化文档。


```python
import matplotlib.pyplot as plt

In [135]: ts = pd.Series(np.random.randn(1000),
   .....:                index=pd.date_range('1/1/2000', periods=1000))
   .....: 

In [136]: ts = ts.cumsum()

In [137]: ts.plot()
Out[137]: <matplotlib.axes._subplots.AxesSubplot at 0x7f2b5771ac88>
```
DataFrame 的 plot() 方法可以快速绘制所有带标签的列：


```python
In [138]: df = pd.DataFrame(np.random.randn(1000, 4), index=ts.index,
   .....:                   columns=['A', 'B', 'C', 'D'])
   .....: 

In [139]: df = df.cumsum()

In [140]: plt.figure()
Out[140]: <Figure size 640x480 with 0 Axes>

In [141]: df.plot()
Out[141]: <matplotlib.axes._subplots.AxesSubplot at 0x7f2b53a2d7f0>

In [142]: plt.legend(loc='best')
Out[142]: <matplotlib.legend.Legend at 0x7f2b539728d0>
```

