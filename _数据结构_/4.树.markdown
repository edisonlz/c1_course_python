
#### 非线性数据结构: 树


树(Tree)是n个节点的有限集,当n=0时称为空树。在任意非空树中：

1). 有且只有一个特定的根（Root）节点。
2). 当n>0的时候，其余节点分为m(m>0)个互不相交的有限集T_1，T_@,……T_m，其中每一个集合本身又是一棵树，被称为根的子树。

![树](./static/树.png)

“树”这种数据结构很像我们生活中的“树”，这里面每个元素我们叫作“节 点”；用来连线相邻节点之间的关系，我们叫作“父子关系”

![树](./static/父子关系.png)

关于“树”，还有三个比较相似的概念：高度（Height）、深 度（Depth）、层（Level）。

![树](./static/树的高度.png)

#### 二叉树
二叉树:每个节点最多有两个“叉”，也就是最多有两个子节点，分别是左子节点和右子节点。二叉树并不要求每个节点都有两个子节点，有的节点只有左子节点，有的节点只有右子节点。



![树](./static/二叉树.png)

##### 满二叉树
2号的二叉树中，叶子节点全都在最底层，除了叶子节点之外，每个节点都有左右两个子节点，这种二叉树就叫作满二叉树。

##### 完全二叉树
3号的二叉树中，叶子节点都在最底下两层，最后一层的叶子节点都靠左排列，并且除了最后一 层，其他层的节点个数都要达到最大，这种二叉树叫作完全二叉树。
![树](./static/完全二叉树.png)





##### 实现二叉树
想要存储一棵二叉树，我们有两种方法，一种是基于指针或者引用的二叉链式存储法，一种是基于数组的顺序存储法。


![树](./static/连式存储.png)

![树](./static/树数组存储空.png)




##### 遍历
前序遍历：对于树中的任意节点来说，根节点，左子树，右子树。 根左右。
中序遍历：对于树中的任意节点来说，左子树, 根节点，右子树。左根右。
后序遍历：对于树中的任意节点来说，左子树，右子树, 根节点。 左右根。

![树](./static/树的遍历.png)












