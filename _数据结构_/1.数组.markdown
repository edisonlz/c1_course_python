
#### 数组

举例: 定义一个长度为 10 的 int 类型的数组

int[] a = new int[10]

![array_in_memory](./static/array_in_memory.png)


计算机给数组 a[10]，分配了一块连续内存空间 1000～1039，其中，内存块的首地址为 base_address = 1000。当我们要随机访问一个地址的时候，，它会首先通过下面的寻址公式，计算出该元素存储的内存地址：

a[i] = a_address = base_address + i * data_type_size

这里 data_type_size 等于 (4字节，32位)


数组支持随机访问，根据下标随机访问的时间复杂度为 O(1)。

数组的插入和删除都十分的低效,时间复杂度为O(n)。

### 插入

假设数组的长度为 n，将一个数据插入到数组中的第 k 个位置。为了把第 k 个 位置腾出来，给新来的数据，我们需要将第 k～n 这部分的元素都顺序地往后挪一位。

示例：将F插入下标为3的位置，3 ~  4 需要往后顺序的移动一位


![array_in_memory](./static/数组中插入数据.gif)
### 删除
插入数据类似，我们要删除第 k 个位置的数据，为了内存的连续性，也需要搬移数据，不然中间就会出现空洞，内存就不连续了。  k+1 ～ n 这部分的元素都顺序地往钱挪一位。




