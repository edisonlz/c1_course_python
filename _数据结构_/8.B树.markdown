#### B树

多路查找树（multi-way search tree），其每一个结点的孩子数可以多于两个，且每一个结点处可以存储多个元素。


```
B树是一种平衡的多路查找树，结点最大的孩子数目称为B树的阶（Order）。
```

一个m阶的B树具有如下属性：

* 若根结点不是终端结点，则至少有2棵子树
* 除根节点以外的所有非叶结点至少有 M/2 棵子树，至多有 M 个子树
* 所有的叶子结点都位于同一层

B 树的平衡条件则有三点：

* 叶子节点都在同一层
* 每个节点的数据数为子树个数减一
* 子树的数据保证左小右大的顺序


这段定义一定让人感到费解吧，那我们就从B树的一个特例：2-3树作为切入点，来看看一个B树是如何构建和操作的。

```
2-3树是这样的一棵多路查找树：其中的每一个结点都具有两个孩子（称为2结点）
或三个孩子（称为3结点）。
```
它拥有如下属性：

* 一个2结点包含一个元素和两个孩子（或没有孩子），和二叉排序树一致，左子树包含的元素小于该元素，右子树包含的元素大于该元素。但是这个2结点要么有两个孩子，要么没有孩子，不能只有一个孩子。
* 一个3结点包含两个元素和三个孩子（或没有孩子），左子树、较小元素、中间子树、较大元素和右子树也按照从小到大排序。一个3结点要么有三个孩子，要么没有孩子。
* 2-3树的所有叶子结点都在同一层次上。


按照这个描述，一棵正确的2-3树大概长这个样子：

![树](./static/2_3树.webp)

插入
下面我们通过构造一棵2-3树来演示它的增删过程，假定初始数据为：{1, 7, 4, 9, 15, 13, 6, 5, 8, 10, 3, 12, 14, 2, 11}。现在树为空，要把1插入进去只需要构建一个2结点即可，如下所示：
![树](./static/b1.webp)
![树](./static/b2.webp)
接下来插入4，可以发现根结点已经是3结点了，因为必须是平衡的，所以只能把根结点拆开，变为3个2结点，如下所示：
![树](./static/b3.webp)
![树](./static/b4.webp)

接下来要插入15，因为9所在结点已经是3结点，但是它的父结点4是2结点，所以可以把4所在结点升级，因为3结点必须有三个孩子，所以7和9所在结点需要拆分，如下所示：
![树](./static/b15.webp)

接下来插入13和6时，对应节点都可以升级，所以插入结果如下：

![树](./static/b6.webp)

接下来插入元素5时，发现6所在结点已经是3结点，而父结点，也就是根结点也是3结点了，这时只能再次拆分。首先，5、6、7中间的数是6，我们把它提出来，它应该位于4和9中间，如下所示：
![树](./static/b7.webp)

因为3结点只能有两个元素，所以根结点也必须拆分，结果如下：

![树](./static/b8.webp)
可以发现，根结点拆分后使得树的高度增加了。接下来插入8，10，3也是重复步骤，结果如下：
![树](./static/b9.webp)
至此，再插入元素12、14、2时也变得十分简单了，结果如下：
![树](./static/b10.webp)
最后插入11，可以发现它在10和12之间，而父结点也是3结点，所以10和12要拆分，9和13也要拆分，11应该和6一起升级为3结点，结果如下：
![树](./static/b11.webp)



删除
现在，我们已经建立了一棵2-3树，我们按照插入顺序，再演示删除的过程。首先删除元素1，因为1是2结点，删除后会影响平衡，但是我们发现它的父结点是一个3结点，所以可以把父结点拆开，2和3合并成一个3结点，结果如下：

![树](./static/b20.webp)

现在，要删除7，因为7是叶节点也是3结点，直接删除就可以，结果如下：

![树](./static/b21.webp)
删除结点4，因为它的左孩子是3结点，只要把它拆开就可以了，结果如下：
![树](./static/b22.webp)

删除9时比较复杂，因为它的左右孩子都是2结点，首先把它的两个孩子合并为3结点并代替它，结果如下：
![树](./static/b23.webp)
此时树是不平衡的，此时发现左侧3和6可以合并为3结点，结果如下：
![树](./static/b24.webp)


总结
这里介绍的2-3树是B树的一个特例，B树就是把2-3树的阶扩展到了m，它的每个结点特性和2-3树一致，除叶结点外每个结点的指针域和数据域都必须填充。



### B+树
遍历的需求主要来源于“检索”，比如网站按照顺序展示一个列表, 它十分适合区间查找。B+树在B树的基础上做了改进。
在B+树中：

B+树的特征：

* 有k个子树的中间节点包含有一个k元素（B树中是k-1个元素），每个元素不保存数据，所有的数据均保存在叶子节点上。
* 所有的叶子节点中包含了全部元素的信息及指向含这些元素记录的指针，且叶子节点本身以关键字的大小自小到大顺序连接。
* 所有的中间节点元素都同时存在与子节点中，在子节点元素中为最大值或者最小值。

![树](./static/b30.webp)